<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>区间 on 巴巴变的博客</title>
        <link>https://blog.bugxch.top/tags/%E5%8C%BA%E9%97%B4/</link>
        <description>Recent content in 区间 on 巴巴变的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>bugxch</copyright>
        <lastBuildDate>Sun, 16 Aug 2020 22:31:31 +0800</lastBuildDate><atom:link href="https://blog.bugxch.top/tags/%E5%8C%BA%E9%97%B4/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>LeetCode区间问题总结</title>
        <link>https://blog.bugxch.top/p/leetcode%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</link>
        <pubDate>Sun, 16 Aug 2020 22:31:31 +0800</pubDate>
        
        <guid>https://blog.bugxch.top/p/leetcode%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
        <description>&lt;img src="https://cdn.pixabay.com/photo/2013/07/18/20/26/sea-164989_960_720.jpg" alt="Featured image of post LeetCode区间问题总结" /&gt;&lt;p&gt;上周五考试没有过，其中专业级第二题是关于区间的问题，在leetcode上找到类似的题目，总结复习下。&lt;/p&gt;
&lt;h2 id=&#34;引子&#34;&gt;引子
&lt;/h2&gt;&lt;p&gt;先看这道题，&lt;a class=&#34;link&#34; href=&#34;https://leetcode-cn.com/problems/corporate-flight-bookings/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;1109. 航班预订统计&lt;/a&gt;，题目是这样的&lt;/p&gt;
&lt;p&gt;这里有&lt;code&gt;n&lt;/code&gt; 个航班，它们分别从 1 到 n 进行编号。&lt;/p&gt;
&lt;p&gt;我们这儿有一份航班预订表，表中第 &lt;code&gt;i&lt;/code&gt; 条预订记录 &lt;code&gt;bookings[i] = [i, j, k]&lt;/code&gt; 意味着我们在从 &lt;code&gt;i&lt;/code&gt; 到&lt;code&gt; j&lt;/code&gt; 的每个航班上预订了 &lt;code&gt;k&lt;/code&gt; 个座位。&lt;/p&gt;
&lt;p&gt;请你返回一个长度为 n 的数组 &lt;code&gt;answer&lt;/code&gt;，按航班编号顺序返回每个航班上预订的座位数。参考示例如下，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;输入&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：&lt;/span&gt;bookings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;],[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;],[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]], n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;输出&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解题思路&#34;&gt;解题思路
&lt;/h3&gt;&lt;p&gt;将这道题的示例画一张表格表示一下，就是下面的结果&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;booking&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;3&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;4&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;total&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;55&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;45&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;常规思路就是以航班号为基本坐标，计算每一个航班增加的座位数，然后逐项汇总相加即可。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置初始结果&lt;code&gt;vector&amp;lt;int&amp;gt; res(n, 0)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;遍历&lt;code&gt;bookings&lt;/code&gt;，每次取其中的航班的预定数，添加到&lt;code&gt;res&lt;/code&gt;对应的数组中，比如第1个booking，那么&lt;code&gt;res[0]+=10; res[1]+=10&lt;/code&gt;，依次类推，直到遍历截止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面的算法比较简单直观，但是可以分析发现，算法的复杂度有点高，两层遍历算法时间复杂度是$O(n^2)$，空间复杂度是$O(n)$不甚理想。&lt;/p&gt;
&lt;p&gt;有没有复杂度更简单的思路呢？这里有一个类比&lt;strong&gt;公交站的思路&lt;/strong&gt;，可以将航班号码比作公交站牌，比如1号公交站，2号公交站，假定这些公交站是依次按顺序分布在一条直线公路上，&lt;strong&gt;第&lt;code&gt;i&lt;/code&gt;个航班的飞机的预定数目就是公交车在第&lt;code&gt;i&lt;/code&gt;个公交站发车时候的乘客数目（包括了上车和下车的乘客数&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;举例说明，第1行表示，第1站交车上人数是10，说明公交车行驶到第1站时上车10人，到第2站时候车上的乘客仍然是10人，说明没有乘客上下车，到第3站时候车上乘客0人，说明此时有10人下车。如果使用长度为&lt;code&gt;N&lt;/code&gt;的数组&lt;code&gt;count&lt;/code&gt;表示每一站&lt;strong&gt;上下乘客的变化量&lt;/strong&gt;(&lt;code&gt;count[i]&lt;/code&gt; 表示第&lt;code&gt;i + 1&lt;/code&gt;站上下车的乘客变化量），&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于&lt;code&gt;booking = [i,j,k]&lt;/code&gt;，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表示在公交站第&lt;code&gt;i&lt;/code&gt;站上车&lt;code&gt;k&lt;/code&gt;人，&lt;code&gt;count[i - 1] += k&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;第&lt;code&gt;i + 1&lt;/code&gt;站直到第&lt;code&gt;j&lt;/code&gt;站都没有乘客上下车，&lt;code&gt;count[i],...,count[j - 1]&lt;/code&gt;无操作；&lt;/li&gt;
&lt;li&gt;在第&lt;code&gt;j + 1&lt;/code&gt;站下车&lt;code&gt;k&lt;/code&gt;人，所以&lt;code&gt;count[j] -= k&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了方便起见，&lt;strong&gt;我们缩小问题的规模，以具体的数字代替抽象的代数字母&lt;/strong&gt;，假如我们就只有3个公交站，取示例中的前2行，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;公交车刚开始上的人数是0，&lt;code&gt;vector&amp;lt;int&amp;gt; count(4, 0)&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;读取第1行，到达第1站，公交车上10人，说明&lt;strong&gt;上车10人，无人下车，&lt;code&gt;count[0]+= 10&lt;/code&gt;&lt;/strong&gt;，到达第2站公交车上依然是10人，说明也&lt;strong&gt;无人上车和下车&lt;/strong&gt;，到达第3站，公交车上0人，说明&lt;strong&gt;10人下车，&lt;code&gt;count[2] -= 10&lt;/code&gt;&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;读取第2行，公交车到达第2站，公交车上20人，说明&lt;strong&gt;上车20人无人下车，&lt;code&gt;count[1] += 20&lt;/code&gt;&lt;/strong&gt;，第3站车上20人，说明&lt;strong&gt;无人下车&lt;/strong&gt;，第4站车上0人，说明&lt;strong&gt;有20人下车, &lt;code&gt;count[3]-=20&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;遍历结束，得到&lt;code&gt;count = {10, 20, -10，-20}&lt;/code&gt;，那么最后每个站点的乘客数就很清楚了，到达第1站前车上乘客0人，到达后上车10人，所以第1站发车前车上10人，第2站到站后上车20人，所以第2站发车前车上乘客10 + 20  = 30人，第3站到站后下车10人，所以发车前车上乘客 30 - 10 = 20人。意思搞清楚之后，代码就很好写了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; corpFlightBookings(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; bookings, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; res(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; counter(n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;booking : bookings)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; booking[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; booking[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// 记录每个booking的开始和结尾即可，中间的站点人数无变化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            counter[start &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; booking[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// start站上车
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            counter[end] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; booking[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// end + 1站下车
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        res[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; counter[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            res[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; counter[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;时间复杂度为$O(n)$。&lt;/p&gt;
&lt;h2 id=&#34;通用框架&#34;&gt;通用框架
&lt;/h2&gt;&lt;p&gt;「待补充」&lt;/p&gt;
&lt;h2 id=&#34;典型题目&#34;&gt;典型题目
&lt;/h2&gt;&lt;p&gt;「待补充」&lt;/p&gt;
&lt;h3 id=&#34;no-986-区间列表交集&#34;&gt;No. 986 区间列表交集
&lt;/h3&gt;&lt;p&gt;题目的链接参考&lt;a class=&#34;link&#34; href=&#34;https://leetcode-cn.com/problems/interval-list-intersections/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;986. 区间列表的交集 - 力扣（LeetCode）&lt;/a&gt;，&lt;/p&gt;
&lt;h3 id=&#34;no-452-引爆气球&#34;&gt;No. 452 引爆气球
&lt;/h3&gt;&lt;p&gt;题目链接参考&lt;a class=&#34;link&#34; href=&#34;https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;452. 用最少数量的箭引爆气球 - 力扣（LeetCode）&lt;/a&gt;，这道题目使用&lt;strong&gt;贪心法&lt;/strong&gt;，将气球的坐标放在坐标轴上，然后从0开始从左到右逐气球扫描，查看是否有交集，图示如下。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料
&lt;/h2&gt;&lt;p&gt;「待补充」&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
