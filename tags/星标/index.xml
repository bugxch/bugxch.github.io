<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>星标 on 巴巴变的博客</title>
        <link>https://blog.bugxch.top/tags/%E6%98%9F%E6%A0%87/</link>
        <description>Recent content in 星标 on 巴巴变的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>bugxch</copyright><atom:link href="https://blog.bugxch.top/tags/%E6%98%9F%E6%A0%87/index.xml" rel="self" type="application/rss+xml" /><item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/02/wucai-2024-02-27-h8dc222/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/02/wucai-2024-02-27-h8dc222/</guid>
        <description>&lt;h2 id=&#34;处理器简史powerpc-01牢不可破的-aim-联盟---少数派&#34;&gt;处理器简史｜PowerPC 01：牢不可破的 AIM 联盟 - 少数派&lt;/h2&gt;
&lt;p&gt;#处理器架构 #星标 #架构&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;#架构 介绍RISC处理器的发展历程&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;John Cocke 打造的 IBM 801 最后在 1986 年被分离出来，作为 IBM RISC 技术个人计算机、即 RT PC 的芯片 IBM ROMP 投入市场，但并没有获得多大成功。前文说到的 David Patterson 和 Carlo H. Sequin 也没闲着，最终造出了 RISC-I 芯片，其仅含有 44420 个晶体管，相比之下，那个时代 CISC 设计的平均数量约 100000 个，虽然被精简到只有 32 条指令，但其性能却完全超过了其他任何单芯片，1983 年，他们又完成了晶体管数量更少、性能却是前者 3 倍的 RISC-II。 &lt;a class=&#34;link&#34; href=&#34;https://sspai.com/post/77570#WCREFX-2754297&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Link&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;#处理器架构&lt;/li&gt;
&lt;li&gt;CISC架构的优势在于使用更少的晶体管（4万个）获得更高的计算性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;见此情景，IBM 再接再厉，继续在 801 的基础上挖掘其潜能，进一步加强其超标量的属性，并为此添加了更多执行单元，包括独立的浮点与定点单元，并加入了分支预测，最后开发出了具有实验性质的猎豹芯片，并又在其基础上研发出黑豹芯片。 &lt;a class=&#34;link&#34; href=&#34;https://sspai.com/post/77570#WCREFX-2754378&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Link&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;#架构&lt;/li&gt;
&lt;li&gt;什么是超标量？浮点和定点单元分开，提升了处理的并行度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/03/wucai-2024-03-01-h8df67c/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/03/wucai-2024-03-01-h8df67c/</guid>
        <description>&lt;h2 id=&#34;细说cache-l1l2l3tlb---知乎&#34;&gt;细说Cache-L1/L2/L3/TLB - 知乎&lt;/h2&gt;
&lt;p&gt;#处理器架构 #星标&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;详细说明了计算机中的cache的结构&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;现在的CPU中有好几个等级的缓存。通常L1和L2缓存都是每个CPU一个的, L1缓存有分为L1i和L1d，分别用来存储指令和数据。L2缓存是不区分指令和数据的。L3缓存多个核心共用一个，通常也不区分指令和数据。 还有一种缓存叫TLB，它主要用来缓存MMU使用的页表，通常我们讲缓存（cache)的时候是不算它的。 &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/31875174#WCREFX-2799599&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Link&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;#处理器架构 cache的分层，下面是一些问题&lt;/li&gt;
&lt;li&gt;指令的retire具体是如何定义的？outstanding的指令retire是什么意思？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/03/wucai-2024-03-02-h8d93me/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/03/wucai-2024-03-02-h8d93me/</guid>
        <description>&lt;h2 id=&#34;發佈京華老宋体7月29日更新v1007---知乎&#34;&gt;【發佈】京華老宋体(7月29日更新v1.007) - 知乎&lt;/h2&gt;
&lt;p&gt;#搜罗 #星标&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;#搜罗 比较好的字体&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-01-h89ahdh/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-01-h89ahdh/</guid>
        <description>&lt;h2 id=&#34;resize---harmonyhus-blog&#34;&gt;Resize - HarmonyHu’s Blog&lt;/h2&gt;
&lt;p&gt;#星标 #算子&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;#算子 双线性插值中align corners和half pixel清晰的解释&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-06-h8fed58/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-06-h8fed58/</guid>
        <description>&lt;h2 id=&#34;computer-science-from-the-bottom-up&#34;&gt;Computer Science from the Bottom Up&lt;/h2&gt;
&lt;p&gt;#处理器架构 #星标&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;#处理器架构 计算机体系结构的好书&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-07-h8f6m36/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-07-h8f6m36/</guid>
        <description>&lt;h2 id=&#34;图解yu12i420yv12nv12nv21yuv420pyuv420spyuv422pyuv444p的区别-csdn博客&#34;&gt;图解YU12、I420、YV12、NV12、NV21、YUV420P、YUV420SP、YUV422P、YUV444P的区别-CSDN博客&lt;/h2&gt;
&lt;p&gt;#AIPP #星标&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;图解YU12、I420、YV12、NV12、NV21、YUV420P、YUV420SP、YUV422P、YUV444P的区别 &lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/84037338#WCREFX-3294461&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Link&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;#aipp 音视频的数据格式图解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
&lt;h3 id=&#34;音视频实践学习&#34;&gt;音视频实践学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/83449831&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;android全平台编译ffmpeg以及x264与fdk-aac实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/83572828&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ubuntu下使用nginx和nginx-rtmp-module配置直播推流服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/83576698&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;android全平台编译ffmpeg合并为单个库实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/83580714&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;android-studio使用cmake编译ffmpeg实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/83582269&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;android全平台编译ffmpeg视频解码器实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/83582640&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;android全平台编译ffmpeg支持命令行实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/83592093&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;android全平台编译ffmpeg视频推流实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/83926620&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;android平台下音频编码之编译LAME库转码PCM为MP3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/84037338&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;图解YU12、I420、YV12、NV12、NV21、YUV420P、YUV420SP、YUV422P、YUV444P的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/byhook/article/details/84256849&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ubuntu平台下编译vlc-android视频播放器实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;YUV模型&lt;/code&gt;是根据一个亮度&lt;code&gt;(Y分量)&lt;/code&gt;和两个色度&lt;code&gt;(UV分量)&lt;/code&gt;来定义颜色空间，常见的YUV格式有&lt;code&gt;YUY2、YUYV、YVYU、UYVY、AYUV、Y41P、Y411、Y211、IF09、IYUV、YV12、YVU9、YUV411、YUV420&lt;/code&gt;等，其中比较常见的&lt;code&gt;YUV420&lt;/code&gt;分为两种：&lt;code&gt;YUV420P和YUV420SP&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们在android平台下使用相机默认图像格式是&lt;code&gt;NV21&lt;/code&gt;属于&lt;code&gt;YUV420SP&lt;/code&gt;格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/sMkzQ0UDvUXYti_c0qJPaDdaWJ9lWmIcqzo2mFoAvwJY/https://img-blog.csdnimg.cn/20181120103325455.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;yuv采样&#34;&gt;YUV采样&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;YUV 4:4:4采样，每一个Y对应一组UV分量,一个YUV占8+8+8 = 24bits 3个字节。 YUV 4:2:2采样，每两个Y共用一组UV分量,一个YUV占8+4+4 = 16bits 2个字节。 YUV 4:2:0采样，每四个Y共用一组UV分量,一个YUV占8+2+2 = 12bits 1.5个字节。 &lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们最常见的&lt;code&gt;YUV420P和YUV420SP&lt;/code&gt;都是基于&lt;code&gt;4:2:0&lt;/code&gt;采样的，所以如果图片的宽为&lt;code&gt;width&lt;/code&gt;，高为&lt;code&gt;heigth&lt;/code&gt;，在内存中占的空间为&lt;code&gt;width * height * 3 / 2&lt;/code&gt;，其中前&lt;code&gt;width * height&lt;/code&gt;的空间存放&lt;code&gt;Y分量&lt;/code&gt;，接着&lt;code&gt;width * height / 4&lt;/code&gt;存放&lt;code&gt;U分量&lt;/code&gt;，最后&lt;code&gt;width * height / 4&lt;/code&gt;存放&lt;code&gt;V分量&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;yuv420pyu12和yv12格式&#34;&gt;YUV420P(YU12和YV12)格式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;YUV420P&lt;/code&gt;又叫&lt;code&gt;plane平面模式&lt;/code&gt;，&lt;code&gt;Y , U , V&lt;/code&gt;分别在不同平面，也就是有三个平面，它是&lt;code&gt;YUV标准格式4：2：0&lt;/code&gt;，主要分为：&lt;code&gt;YU12和YV12&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/sazpJMYEGfrb0knKhXGyryHl1VpkgsMGRGu3Dcctv690/https://img-blog.csdnimg.cn/20181119225805899.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/sTYJ8PqIMaRvcYk41hyYRD81LX4X0P2PeH-2n5OVlNtM/https://img-blog.csdnimg.cn/2018111923013322.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;YU12格式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;android平台下&lt;/code&gt;也叫作&lt;code&gt;I420格式&lt;/code&gt;，首先是所有&lt;code&gt;Y值&lt;/code&gt;，然后是所有&lt;code&gt;U值&lt;/code&gt;，最后是所有&lt;code&gt;V值&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/s0nzKrPwwnvR_d4Bixl2alse7WGL90-oEW3th0tGJ9BI/https://img-blog.csdnimg.cn/2018112012345555.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;YU12：亮度(行×列) + U(行×列/4) + V(行×列/4)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;YV12格式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;YV12格式&lt;/code&gt;与&lt;code&gt;YU12&lt;/code&gt;基本相同，首先是所有&lt;code&gt;Y值&lt;/code&gt;，然后是所有&lt;code&gt;V值&lt;/code&gt;，最后是所有&lt;code&gt;U值&lt;/code&gt;。只要注意从适当的位置提取&lt;code&gt;U和V值&lt;/code&gt;，&lt;code&gt;YU12和YV12&lt;/code&gt;都可以使用相同的算法进行处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/sYPhvbrWUkU4cfhNfLBvBNTNNaYzb8Zz4cEF-R-tuhN8/https://img-blog.csdnimg.cn/20181120123516554.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;YV12：亮度Y(行×列) + V(行×列/4) + U(行×列/4)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;YU12: YYYYYYYY UUVV    =&amp;gt;    YUV420P YV12: YYYYYYYY VVUU    =&amp;gt;    YUV420P &lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;YUV模型是根据一个亮度(Y分量)和两个色度(UV分量)来定义颜色空间，常见的YUV格式有YUY2、YUYV、YVYU、UYVY、AYUV、Y41P、Y411、Y211、IF09、IYUV、YV12、YVU9、YUV411、YUV420等，其中比较常见的YUV420分为两种：YUV420P和YUV420SP。&lt;/p&gt;
&lt;p&gt;我们在android平台下使用相机默认图像格式是NV21属于YUV420SP格式## YUV420SP(NV21和NV12)格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;YUV420SP&lt;/code&gt;格式的图像阵列，首先是所有&lt;code&gt;Y值&lt;/code&gt;，然后是&lt;code&gt;UV&lt;/code&gt;或者&lt;code&gt;VU&lt;/code&gt;交替存储，&lt;code&gt;NV12和NV21属于YUV420SP&lt;/code&gt;格式，是一种&lt;code&gt;two-plane模式&lt;/code&gt;，即&lt;code&gt;Y和UV分为两个plane&lt;/code&gt;，但是&lt;code&gt;UV(CbCr)&lt;/code&gt;为交错存储，而不是分为三个平面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/sBpnmM5exUU_uP0fZVKM4lFbb3ELfMmcnyZRAO5T4YLk/https://img-blog.csdnimg.cn/201811192258324.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NV21格式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;android手机从摄像头采集的预览数据一般都是NV21，存储顺序是先存Y，再VU交替存储，&lt;code&gt;NV21&lt;/code&gt;存储顺序是先存&lt;code&gt;Y值&lt;/code&gt;，再&lt;code&gt;VU&lt;/code&gt;交替存储：&lt;code&gt;YYYYVUVUVU&lt;/code&gt;，以 &lt;code&gt;4 X 4&lt;/code&gt; 图片为例子，占用内存为 &lt;code&gt;4 X 4 X 3 / 2 = 24&lt;/code&gt; 个字节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/sfpl4v4Ab1lBAeL-8ILFK8Z7yzTjLaVOSit0clgRgqUs/https://img-blog.csdnimg.cn/20181119235116552.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NV12格式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;NV12与NV21类似，也属于&lt;code&gt;YUV420SP&lt;/code&gt;格式，&lt;code&gt;NV12&lt;/code&gt;存储顺序是先存&lt;code&gt;Y值&lt;/code&gt;，再&lt;code&gt;UV&lt;/code&gt;交替存储：&lt;code&gt;YYYYUVUVUV&lt;/code&gt;，以 &lt;code&gt;4 X 4&lt;/code&gt; 图片为例子，占用内存为 &lt;code&gt;4 X 4 X 3 / 2 = 24&lt;/code&gt; 个字节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/sma_yqSng2U3gGWgBJL0-M5HqW5pIn9sqLzZL1XneBHQ/https://img-blog.csdnimg.cn/20181119235210475.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意：在DVD中，色度信号被存储成Cb和Cr(C代表颜色，b代表蓝色，r代表红色)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NV12: YYYYYYYY UVUV    =&amp;gt;YUV420SP NV21: YYYYYYYY VUVU    =&amp;gt;YUV420SP &lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;yuv和rgb转换&#34;&gt;YUV和RGB转换&lt;/h3&gt;
&lt;p&gt;`Y      =  (0.257 * R) + (0.504 * G) + (0.098 * B) + 16
Cr = V =  (0.439 * R) - (0.368 * G) - (0.071 * B) + 128
Cb = U = -(0.148 * R) - (0.291 * G) + (0.439 * B) + 128&lt;/p&gt;
&lt;p&gt;B = 1.164(Y - 16) + 2.018(U - 128)
G = 1.164(Y - 16) - 0.813(V - 128) - 0.391(U - 128)
R = 1.164(Y - 16) + 1.596(V - 128)
`&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;li&gt;5&lt;/li&gt;
&lt;li&gt;6&lt;/li&gt;
&lt;li&gt;7&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分离yuv420p&#34;&gt;分离YUV420P&lt;/h3&gt;
&lt;p&gt;下面基于实例来理解&lt;code&gt;Y，U，V分量的作用&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/s0xbrRr7beeo68hdzhB9Fb1N77qci7EkbIaJKvMhCOsY/https://img-blog.csdnimg.cn/20181120132051472.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;先使用&lt;code&gt;ffmpeg&lt;/code&gt;将指定的图片转为&lt;code&gt;yuv420p&lt;/code&gt;格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -i input.jpg -s 510x510 -pix_fmt yuv420p input.yuv &lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;分离YUV分量&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔者使用的&lt;code&gt;Clion&lt;/code&gt;直接运行下面这段代码，分离出所需的文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void split_yuv420(char *inputPath, int width, int height) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_yuv = fopen(inputPath, &amp;#34;rb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_y = fopen(&amp;#34;output_420_y.y&amp;#34;, &amp;#34;wb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_u = fopen(&amp;#34;output_420_u.y&amp;#34;, &amp;#34;wb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_v = fopen(&amp;#34;output_420_v.y&amp;#34;, &amp;#34;wb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    unsigned char *data = (unsigned char *) malloc(width * height * 3 / 2);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fread(data, 1, width * height * 3 / 2, fp_yuv);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //Y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(data, 1, width * height, fp_y);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //U
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(data + width * height, 1, width * height / 4, fp_u);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //V
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(data + width * height * 5 / 4, 1, width * height / 4, fp_v);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //释放资源
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    free(data);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_yuv);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_y);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_u);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_v);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;笔者使用的是&lt;code&gt;ubuntu系统&lt;/code&gt;，因此运行&lt;code&gt;yuvplayer.exe&lt;/code&gt;文件，需要提前安装好&lt;code&gt;wine&lt;/code&gt;：&lt;code&gt;sudo apt install wine&lt;/code&gt;，运行&lt;code&gt;yuvplayer&lt;/code&gt;之后，需要先设置&lt;code&gt;像素格式为Y&lt;/code&gt;，否则你看到的图像可能会有问题&lt;/p&gt;
&lt;p&gt;先看&lt;code&gt;output_420_y.y&lt;/code&gt;文件：(分辨率设置为510x510)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/seroHqPK4TN6WbfVU7Xnc_oIsZgjJJikEfjz9GqMmI40/https://img-blog.csdnimg.cn/20181120145851501.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;output_420_u.y&lt;/code&gt;显示如下：(分辨率设置为255x255)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/sTE6oRbTQiZ_UjeLZgquoer7VAodkJ7qIhqiGwlOI5Kc/https://img-blog.csdnimg.cn/20181120150020705.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;output_420_v.y&lt;/code&gt;显示如下：(分辨率设置为255x255)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/sHj4-4BrcQciG9WjfUrsMAtptfkhQXR4hHNNpDBwEkpI/https://img-blog.csdnimg.cn/20181120150043110.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成灰度图&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;上面的例子实际上已经生成了一个&lt;code&gt;灰度图&lt;/code&gt;了，但是只保留了&lt;code&gt;Y分量&lt;/code&gt;，你如果直接用&lt;code&gt;ffplay工具&lt;/code&gt;查看会有问题，下面的函数将会生成一个标准的&lt;code&gt;YUV文件&lt;/code&gt;并且保留&lt;code&gt;Y分量&lt;/code&gt;，你可能会有疑问，为什么&lt;code&gt;U分量和V分量&lt;/code&gt;要写入&lt;code&gt;0x80&lt;/code&gt;，其实你可以参考上面的&lt;code&gt;YUV转RGB的公式&lt;/code&gt;，YUV数据是无法直接显示的，最终需要转成RGB显示，因此我这里是只需要保留&lt;code&gt;Y分量&lt;/code&gt;，忽略&lt;code&gt;UV&lt;/code&gt;分量的影响，因此根据上面的公式，我在&lt;code&gt;U和V分量中都写入128&lt;/code&gt;就是十六进制的&lt;code&gt;0x80&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;保留Y分量(生成灰度图)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void yuv420p_y(char *inputPath, char *outputPath, int width, int height) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *inFile = fopen(inputPath, &amp;#34;rb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *outFile = fopen(outputPath, &amp;#34;wb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    unsigned char *data = (unsigned char *) malloc(width * height * 3 / 2);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fread(data, 1, width * height * 3 / 2, inFile);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //Y分量
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(data, 1, width * height, outFile);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    unsigned char *buffer = (unsigned char *) malloc(width * height / 4);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    memset(buffer, 0x80, width * height / 4);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //U分量
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(buffer, 1, width * height / 4, outFile);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //V分量
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(buffer, 1, width * height / 4, outFile);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    free(buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    free(data);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(inFile);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(outFile);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;`int main() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yuv420p_y(&amp;quot;/home/byhook/media/input.yuv&amp;quot;, &amp;quot;/home/byhook/media/output.yuv&amp;quot;, 510, 510);

return 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
`&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;li&gt;5&lt;/li&gt;
&lt;li&gt;6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;code&gt;ffplay&lt;/code&gt;来播放&lt;code&gt;yuv格式&lt;/code&gt;的文件：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffplay -f rawvideo -video_size 510x510 output.yuv &lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要注意这里的分辨率不能错&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://g1proxy.wimg.site/siSsBJdi6DSkO0KUP5ux3m2UZfkdjwSFpyIU3xjCD-4c/https://img-blog.csdnimg.cn/20181120131959565.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;分离yuv422p&#34;&gt;分离YUV422P&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;YUV422P&lt;/code&gt;基于&lt;code&gt;YUV 4:2:2&lt;/code&gt;采样，每两个Y共用一组UV分量,一个YUV占8+4+4 = 16bits 2个字节。分离代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void split_yuv422(char *inputPath, int width, int height) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_yuv = fopen(inputPath, &amp;#34;rb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_y = fopen(&amp;#34;output_422_y.y&amp;#34;, &amp;#34;wb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_u = fopen(&amp;#34;output_422_u.y&amp;#34;, &amp;#34;wb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_v = fopen(&amp;#34;output_422_v.y&amp;#34;, &amp;#34;wb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    unsigned char *data = (unsigned char *) malloc(width * height * 2);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fread(data, 1, width * height * 2, fp_yuv);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //Y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(data, 1, width * height, fp_y);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //U
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(data + width * height, 1, width * height / 2, fp_u);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //V
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(data + width * height * 3 / 2, 1, width * height / 2, fp_v);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //释放资源
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    free(data);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_yuv);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_y);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_u);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_v);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;分离yuv444p&#34;&gt;分离YUV444P&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;YUV444P&lt;/code&gt;基于&lt;code&gt;YUV 4:4:4&lt;/code&gt;采样，每一个Y对应一组UV分量,一个YUV占8+8+8 = 24bits 3个字节。分离代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void split_yuv444(char *inputPath, int width, int height) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_yuv = fopen(inputPath, &amp;#34;rb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_y = fopen(&amp;#34;output_444_y.y&amp;#34;, &amp;#34;wb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_u = fopen(&amp;#34;output_444_u.y&amp;#34;, &amp;#34;wb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    FILE *fp_v = fopen(&amp;#34;output_444_v.y&amp;#34;, &amp;#34;wb+&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    unsigned char *data = (unsigned char *) malloc(width * height * 3);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fread(data, 1, width * height * 3, fp_yuv);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //Y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(data, 1, width * height, fp_y);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //U
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(data + width * height, 1, width * height, fp_u);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //V
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fwrite(data + width * height * 2, 1, width * height, fp_v);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //释放资源
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    free(data);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_yuv);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_y);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_u);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fclose(fp_v);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;参考：&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/leixiaohua1020/article/details/50534150&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/leixiaohua1020/article/details/50534150&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/YUV&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/YUV&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-19-h8f2768/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-19-h8f2768/</guid>
        <description>&lt;h2 id=&#34;the-annotated-transformer&#34;&gt;The Annotated Transformer&lt;/h2&gt;
&lt;p&gt;#星标 #网络结构&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;#网络结构 有注解的transformer的论文解读&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-19-h8f276b/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-19-h8f276b/</guid>
        <description>&lt;h2 id=&#34;the-annotated-transformer&#34;&gt;The Annotated Transformer&lt;/h2&gt;
&lt;p&gt;#星标 #网络结构&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;#网络结构 transformer的比较注解&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-19-h8f27e9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-19-h8f27e9/</guid>
        <description>&lt;h2 id=&#34;u-net-a-pytorch-implementation-in-60-lines-of-code&#34;&gt;U-Net A PyTorch Implementation in 60 lines of Code&lt;/h2&gt;
&lt;p&gt;#星标 #网络结构&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;#网络结构 使用pytorch的60行完成一个Unet&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-19-h8f2fba/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-19-h8f2fba/</guid>
        <description>&lt;h2 id=&#34;深入浅出pytorch--深入浅出pytorch&#34;&gt;深入浅出PyTorch — 深入浅出PyTorch&lt;/h2&gt;
&lt;p&gt;#星标 #网络工具&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;#网络工具 利用pytorch构建网络模型并进行推理和部署&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-22-h8f3h78/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-22-h8f3h78/</guid>
        <description>&lt;h2 id=&#34;a-history-of-nvidia-stream-multiprocessor&#34;&gt;A history of NVidia Stream Multiprocessor&lt;/h2&gt;
&lt;p&gt;#处理器架构 #星标&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;#处理器架构 非常不错的处理器架构的介绍文章&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-23-h8fb383/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://blog.bugxch.top/wucai/2024/04/wucai-2024-04-23-h8fb383/</guid>
        <description>&lt;h2 id=&#34;cuda-c-best-practices-guide&#34;&gt;CUDA C++ Best Practices Guide&lt;/h2&gt;
&lt;p&gt;#处理器架构 #星标&lt;/p&gt;
&lt;h2 id=&#34;页面笔记&#34;&gt;页面笔记&lt;/h2&gt;
&lt;p&gt;#处理器架构 cuda处理器的最佳编程实践&lt;/p&gt;
&lt;h2 id=&#34;划线列表&#34;&gt;划线列表&lt;/h2&gt;
&lt;h2 id=&#34;全文剪藏&#34;&gt;全文剪藏&lt;/h2&gt;
</description>
        </item>
        
    </channel>
</rss>
